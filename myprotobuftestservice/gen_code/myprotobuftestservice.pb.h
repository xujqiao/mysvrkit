// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myprotobuftestservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_myprotobuftestservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_myprotobuftestservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_myprotobuftestservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_myprotobuftestservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_myprotobuftestservice_2eproto;
class SearchReq;
struct SearchReqDefaultTypeInternal;
extern SearchReqDefaultTypeInternal _SearchReq_default_instance_;
class SearchResp;
struct SearchRespDefaultTypeInternal;
extern SearchRespDefaultTypeInternal _SearchResp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SearchReq* Arena::CreateMaybeMessage<::SearchReq>(Arena*);
template<> ::SearchResp* Arena::CreateMaybeMessage<::SearchResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SearchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchReq) */ {
 public:
  inline SearchReq() : SearchReq(nullptr) {}
  ~SearchReq() override;
  explicit PROTOBUF_CONSTEXPR SearchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReq(const SearchReq& from);
  SearchReq(SearchReq&& from) noexcept
    : SearchReq() {
    *this = ::std::move(from);
  }

  inline SearchReq& operator=(const SearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReq& operator=(SearchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReq* internal_default_instance() {
    return reinterpret_cast<const SearchReq*>(
               &_SearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchReq& a, SearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchReq& from) {
    SearchReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchReq";
  }
  protected:
  explicit SearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kResultPerPageFieldNumber = 3,
  };
  // optional string query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional int32 page_number = 2;
  bool has_page_number() const;
  private:
  bool _internal_has_page_number() const;
  public:
  void clear_page_number();
  int32_t page_number() const;
  void set_page_number(int32_t value);
  private:
  int32_t _internal_page_number() const;
  void _internal_set_page_number(int32_t value);
  public:

  // optional int32 result_per_page = 3;
  bool has_result_per_page() const;
  private:
  bool _internal_has_result_per_page() const;
  public:
  void clear_result_per_page();
  int32_t result_per_page() const;
  void set_result_per_page(int32_t value);
  private:
  int32_t _internal_result_per_page() const;
  void _internal_set_result_per_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    int32_t page_number_;
    int32_t result_per_page_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_myprotobuftestservice_2eproto;
};
// -------------------------------------------------------------------

class SearchResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchResp) */ {
 public:
  inline SearchResp() : SearchResp(nullptr) {}
  ~SearchResp() override;
  explicit PROTOBUF_CONSTEXPR SearchResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResp(const SearchResp& from);
  SearchResp(SearchResp&& from) noexcept
    : SearchResp() {
    *this = ::std::move(from);
  }

  inline SearchResp& operator=(const SearchResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResp& operator=(SearchResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResp* internal_default_instance() {
    return reinterpret_cast<const SearchResp*>(
               &_SearchResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResp& a, SearchResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchResp& from) {
    SearchResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchResp";
  }
  protected:
  explicit SearchResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetMsgFieldNumber = 1,
  };
  // optional string ret_msg = 1;
  bool has_ret_msg() const;
  private:
  bool _internal_has_ret_msg() const;
  public:
  void clear_ret_msg();
  const std::string& ret_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_msg();
  PROTOBUF_NODISCARD std::string* release_ret_msg();
  void set_allocated_ret_msg(std::string* ret_msg);
  private:
  const std::string& _internal_ret_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_msg(const std::string& value);
  std::string* _internal_mutable_ret_msg();
  public:

  // @@protoc_insertion_point(class_scope:SearchResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_myprotobuftestservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchReq

// optional string query = 1;
inline bool SearchReq::_internal_has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchReq::has_query() const {
  return _internal_has_query();
}
inline void SearchReq::clear_query() {
  _impl_.query_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchReq::query() const {
  // @@protoc_insertion_point(field_get:SearchReq.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchReq::set_query(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchReq.query)
}
inline std::string* SearchReq::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:SearchReq.query)
  return _s;
}
inline const std::string& SearchReq::_internal_query() const {
  return _impl_.query_.Get();
}
inline void SearchReq::_internal_set_query(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchReq::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchReq::release_query() {
  // @@protoc_insertion_point(field_release:SearchReq.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.query_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchReq::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchReq.query)
}

// optional int32 page_number = 2;
inline bool SearchReq::_internal_has_page_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchReq::has_page_number() const {
  return _internal_has_page_number();
}
inline void SearchReq::clear_page_number() {
  _impl_.page_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SearchReq::_internal_page_number() const {
  return _impl_.page_number_;
}
inline int32_t SearchReq::page_number() const {
  // @@protoc_insertion_point(field_get:SearchReq.page_number)
  return _internal_page_number();
}
inline void SearchReq::_internal_set_page_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.page_number_ = value;
}
inline void SearchReq::set_page_number(int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:SearchReq.page_number)
}

// optional int32 result_per_page = 3;
inline bool SearchReq::_internal_has_result_per_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SearchReq::has_result_per_page() const {
  return _internal_has_result_per_page();
}
inline void SearchReq::clear_result_per_page() {
  _impl_.result_per_page_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SearchReq::_internal_result_per_page() const {
  return _impl_.result_per_page_;
}
inline int32_t SearchReq::result_per_page() const {
  // @@protoc_insertion_point(field_get:SearchReq.result_per_page)
  return _internal_result_per_page();
}
inline void SearchReq::_internal_set_result_per_page(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_per_page_ = value;
}
inline void SearchReq::set_result_per_page(int32_t value) {
  _internal_set_result_per_page(value);
  // @@protoc_insertion_point(field_set:SearchReq.result_per_page)
}

// -------------------------------------------------------------------

// SearchResp

// optional string ret_msg = 1;
inline bool SearchResp::_internal_has_ret_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchResp::has_ret_msg() const {
  return _internal_has_ret_msg();
}
inline void SearchResp::clear_ret_msg() {
  _impl_.ret_msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:SearchResp.ret_msg)
  return _internal_ret_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResp::set_ret_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ret_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchResp.ret_msg)
}
inline std::string* SearchResp::mutable_ret_msg() {
  std::string* _s = _internal_mutable_ret_msg();
  // @@protoc_insertion_point(field_mutable:SearchResp.ret_msg)
  return _s;
}
inline const std::string& SearchResp::_internal_ret_msg() const {
  return _impl_.ret_msg_.Get();
}
inline void SearchResp::_internal_set_ret_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ret_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchResp::_internal_mutable_ret_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ret_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchResp::release_ret_msg() {
  // @@protoc_insertion_point(field_release:SearchResp.ret_msg)
  if (!_internal_has_ret_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ret_msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ret_msg_.IsDefault()) {
    _impl_.ret_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchResp::set_allocated_ret_msg(std::string* ret_msg) {
  if (ret_msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ret_msg_.SetAllocated(ret_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ret_msg_.IsDefault()) {
    _impl_.ret_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchResp.ret_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_myprotobuftestservice_2eproto
